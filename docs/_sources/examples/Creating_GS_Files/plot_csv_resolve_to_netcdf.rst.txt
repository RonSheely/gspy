
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Creating_GS_Files/plot_csv_resolve_to_netcdf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Creating_GS_Files_plot_csv_resolve_to_netcdf.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Creating_GS_Files_plot_csv_resolve_to_netcdf.py:


CSV to NetCDF
-------------

This example demonstrates how to convert comma-separated values (CSV) data to the GS NetCDF format. Specifically this example includes:

1. Raw AEM data, from the Resolve system
2. Inverted resistivity models

Dataset Reference:
Burton, B.L., Minsley, B.J., Bloss, B.R., and Kress, W.H., 2021, Airborne electromagnetic, magnetic, and radiometric survey of the Mississippi Alluvial Plain, November 2018 - February 2019: U.S. Geological Survey data release, https://doi.org/10.5066/P9XBBBUU.

.. GENERATED FROM PYTHON SOURCE LINES 15-19

.. code-block:: Python

    import matplotlib.pyplot as plt
    from os.path import join
    from gspy import Survey








.. GENERATED FROM PYTHON SOURCE LINES 20-22

Convert the resolve csv data to NetCDF
++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 24-25

Initialize the Survey

.. GENERATED FROM PYTHON SOURCE LINES 25-34

.. code-block:: Python


    # Path to example files
    data_path = '..//..//..//..//example_material//example_2'

    # Survey metadata file
    metadata = join(data_path, "data//Resolve_survey_md.yml")
    # Establish the Survey
    survey = Survey(metadata)








.. GENERATED FROM PYTHON SOURCE LINES 35-37

Import raw AEM data from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 37-43

.. code-block:: Python

    d_data = join(data_path, 'data//Resolve.csv')
    d_supp = join(data_path, 'data//Resolve_data_md.yml')

    # Add the raw AEM data as a tabular dataset
    survey.add_data(key='data', data_filename=d_data, metadata_file=d_supp)








.. GENERATED FROM PYTHON SOURCE LINES 44-46

Import inverted AEM models from CSV-format.
Define input model file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: Python

    m_data = join(data_path, 'model//Resolve_model.csv')
    m_supp = join(data_path, 'model//Resolve_model_md.yml')

    # Add the inverted AEM models as a tabular dataset
    survey.add_data(key="model", data_filename=m_data, metadata_file=m_supp)








.. GENERATED FROM PYTHON SOURCE LINES 53-54

Save to NetCDF file

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: Python

    d_out = join(data_path, 'model//Resolve.nc')
    survey.write_netcdf(d_out)








.. GENERATED FROM PYTHON SOURCE LINES 58-59

Reading back in the GS NetCDF file

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: Python

    new_survey = Survey.open_netcdf(d_out)

    # Check the Survey information







.. GENERATED FROM PYTHON SOURCE LINES 63-64

Plotting

.. GENERATED FROM PYTHON SOURCE LINES 64-87

.. code-block:: Python


    # Make a scatter plot of a specific data variable, using GSPy's plotter
    plt.figure()
    new_survey['data'].scatter(hue='dtm', vmin=30, vmax=50)


    # Subsetting by line number, and plotting by distance along that line
    tmp = new_survey['data'].subset('line', 10010)
    # tmp = new_survey['data'].where(new_survey['data'].dataset['line']==10010)
    plt.figure()
    # plt.subplot(121)
    # tmp.gs_tabular.plot(hue='DTM')
    # plt.subplot(122)
    # tmp.gs_tabular.scatter(x='x', y='DTM')
    tmp.scatter(y='dtm')

    #IF YOU SPECIFY HUE ITS A 2D COLOUR Plot
    #OTHERWISE ITS JUST A PLOT (LINE POINTS ETC)

    # Make a scatter plot of a specific model variable, using GSPy's plotter
    plt.figure()
    new_survey['model'].gs_tabular.scatter(hue='doi_standard')
    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_resolve_to_netcdf_001.png
         :alt: plot csv resolve to netcdf
         :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_resolve_to_netcdf_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_resolve_to_netcdf_002.png
         :alt: plot csv resolve to netcdf
         :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_resolve_to_netcdf_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_resolve_to_netcdf_003.png
         :alt: plot csv resolve to netcdf
         :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_resolve_to_netcdf_003.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 2.464 seconds)


.. _sphx_glr_download_examples_Creating_GS_Files_plot_csv_resolve_to_netcdf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_csv_resolve_to_netcdf.ipynb <plot_csv_resolve_to_netcdf.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_csv_resolve_to_netcdf.py <plot_csv_resolve_to_netcdf.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_csv_resolve_to_netcdf.zip <plot_csv_resolve_to_netcdf.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
