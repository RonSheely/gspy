
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Creating_GS_Files/plot_csv_skytem_to_netcdf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_Creating_GS_Files_plot_csv_skytem_to_netcdf.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Creating_GS_Files_plot_csv_skytem_to_netcdf.py:


Multi-dataset Survey
--------------------

This example demonstrates the typical workflow for creating a GS file for an AEM survey in its entirety, i.e., the NetCDF file contains all related datasets together, e.g., raw data, processed data, inverted models, and derivative products. Specifically, this survey contains:

1. Minimally processed (raw) AEM data and raw/processed magnetic data provided by SkyTEM
2. Fully processed AEM data used as input to inversion
3. Laterally constrained inverted resistivity models
4. Point-data estimates of bedrock depth derived from the AEM models
5. Interpolated magnetic and bedrock depth grids

Note:
To make the size of this example more managable, some of the input datasets have been downsampled relative to the source files in the data release referenced below.

Dataset Reference:
Minsley, B.J, Bloss, B.R., Hart, D.J., Fitzpatrick, W., Muldoon, M.A., Stewart, E.K., Hunt, R.J., James, S.R., Foks, N.L., and Komiskey, M.J., 2022, Airborne electromagnetic and magnetic survey data, northeast Wisconsin (ver. 1.1, June 2022): U.S. Geological Survey data release, https://doi.org/10.5066/P93SY9LI.

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default

    import matplotlib.pyplot as plt
    from os.path import join
    from gspy import Survey








.. GENERATED FROM PYTHON SOURCE LINES 25-27

Convert the Skytem csv data to NetCDF
+++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 29-30

Initialize the Survey

.. GENERATED FROM PYTHON SOURCE LINES 30-40

.. code-block:: default


    # Path to example files
    data_path = '..//..//supplemental//region//WI'

    # Survey metadata file
    metadata = join(data_path, "data//WI_SkyTEM_survey_md.json")

    # Establish the Survey
    survey = Survey(metadata)








.. GENERATED FROM PYTHON SOURCE LINES 41-44

1 - Raw Data -
Import raw AEM data from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 44-50

.. code-block:: default

    d_data1 = join(data_path, 'data//WI_SkyTEM_2021_ContractorData.csv')
    d_supp1 = join(data_path, 'data//WI_SkyTEM_raw_data_md.json')

    # Add the raw AEM data as a tabular dataset
    survey.add_tabular(type='csv', data_filename=d_data1, metadata_file=d_supp1)








.. GENERATED FROM PYTHON SOURCE LINES 51-54

2 - Processed Data -
Import processed AEM data from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 54-60

.. code-block:: default

    d_data2 = join(data_path, 'data//WI_SkyTEM_2021_ProcessedData.csv')
    d_supp2 = join(data_path, 'data//WI_SkyTEM_processed_data_md.json')

    # Add the processed AEM data as a tabular dataset
    survey.add_tabular(type='csv', data_filename=d_data2, metadata_file=d_supp2)








.. GENERATED FROM PYTHON SOURCE LINES 61-64

3 - Inverted Models -
Import inverted AEM models from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 64-70

.. code-block:: default

    m_data3 = join(data_path, 'model//WI_SkyTEM_2021_InvertedModels.csv')
    m_supp3 = join(data_path, 'model//WI_SkyTEM_inverted_models_md.json')

    # Add the inverted AEM models as a tabular dataset
    survey.add_tabular(type='csv', data_filename=m_data3, metadata_file=m_supp3)








.. GENERATED FROM PYTHON SOURCE LINES 71-74

4 - Bedrock Picks -
Import AEM-based estimated of depth to bedrock from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 74-80

.. code-block:: default

    d_data4 = join(data_path, 'data//topDolomite_Blocky_LidarDEM.csv')
    d_supp4 = join(data_path, 'data//WI_SkyTEM_bedrock_picks_md.json')

    # Add the AEM-based estimated of depth to bedrock as a tabular dataset
    survey.add_tabular(type='csv', data_filename=d_data4, metadata_file=d_supp4)








.. GENERATED FROM PYTHON SOURCE LINES 81-84

5 - Derivative Maps -
Import interpolated bedrock and magnetic maps from TIF-format.
Define input metadata file (which contains the TIF filenames linked to variable names)

.. GENERATED FROM PYTHON SOURCE LINES 84-89

.. code-block:: default

    m_supp5 = join(data_path, 'data//WI_SkyTEM_mag_bedrock_grids_md.json')

    # Add the interpolated maps as a raster dataset
    survey.add_raster(metadata_file=m_supp5)








.. GENERATED FROM PYTHON SOURCE LINES 90-91

Save to NetCDF file

.. GENERATED FROM PYTHON SOURCE LINES 91-97

.. code-block:: default

    d_out = join(data_path, 'model//WISkyTEM.nc')
    survey.write_netcdf(d_out)

    # print a summary of the survey contents
    print(survey.contents)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    tabular:
        [0] raw data
        [1] processed data
        [2] inverted resistivity models
        [3] bedrock elevation points
    raster:
        [0] gridded magnetic and bedrock maps





.. GENERATED FROM PYTHON SOURCE LINES 98-99

Reading back in

.. GENERATED FROM PYTHON SOURCE LINES 99-106

.. code-block:: default

    new_survey = Survey().read_netcdf(d_out)

    print(new_survey.spatial_ref.attrs)

    print(new_survey.tabular[0]['LM_gate_times'])
    print(new_survey.tabular[0]['LM_gate_times'].values[0])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    {'crs_wkt': 'PROJCRS["NAD83(HARN) / Wisconsin Transverse Mercator",BASEGEOGCRS["NAD83(HARN)",DATUM["NAD83 (High Accuracy Reference Network)",ELLIPSOID["GRS 1980",6378137,298.257222101,LENGTHUNIT["metre",1]]],PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433]],ID["EPSG",4152]],CONVERSION["Wisconsin Transverse Mercator 83",METHOD["Transverse Mercator",ID["EPSG",9807]],PARAMETER["Latitude of natural origin",0,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8801]],PARAMETER["Longitude of natural origin",-90,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8802]],PARAMETER["Scale factor at natural origin",0.9996,SCALEUNIT["unity",1],ID["EPSG",8805]],PARAMETER["False easting",520000,LENGTHUNIT["metre",1],ID["EPSG",8806]],PARAMETER["False northing",-4480000,LENGTHUNIT["metre",1],ID["EPSG",8807]]],CS[Cartesian,2],AXIS["easting (X)",east,ORDER[1],LENGTHUNIT["metre",1]],AXIS["northing (Y)",north,ORDER[2],LENGTHUNIT["metre",1]],USAGE[SCOPE["State-wide spatial data management."],AREA["United States (USA) - Wisconsin."],BBOX[42.48,-92.89,47.31,-86.25]],ID["EPSG",3071]]', 'semi_major_axis': 6378137.0, 'semi_minor_axis': 6356752.314140356, 'inverse_flattening': 298.257222101, 'reference_ellipsoid_name': 'GRS 1980', 'longitude_of_prime_meridian': 0.0, 'prime_meridian_name': 'Greenwich', 'geographic_crs_name': 'NAD83(HARN)', 'horizontal_datum_name': 'NAD83 (High Accuracy Reference Network)', 'projected_crs_name': 'NAD83(HARN) / Wisconsin Transverse Mercator', 'grid_mapping_name': 'transverse_mercator', 'latitude_of_projection_origin': 0.0, 'longitude_of_central_meridian': -90.0, 'false_easting': 520000.0, 'false_northing': -4480000.0, 'scale_factor_at_central_meridian': 0.9996, 'authority': 'EPSG', 'wkid': '3071'}
    <xarray.DataArray 'LM_gate_times' (LM_gate_times: 28)>
    array([-1.135000e-06,  3.650000e-07,  2.365000e-06,  4.365000e-06,
            6.365000e-06,  8.365000e-06,  1.036500e-05,  1.286500e-05,
            1.636500e-05,  2.086500e-05,  2.636500e-05,  3.336500e-05,
            4.236500e-05,  5.386500e-05,  6.836500e-05,  8.636500e-05,
            1.088650e-04,  1.368650e-04,  1.723650e-04,  2.178650e-04,
            2.748650e-04,  3.468650e-04,  4.378650e-04,  5.518650e-04,
            6.958650e-04,  8.773650e-04,  1.105865e-03,  1.394365e-03])
    Coordinates:
        spatial_ref    float64 ...
      * LM_gate_times  (LM_gate_times) float64 -1.135e-06 3.65e-07 ... 0.001394
    Attributes:
        standard_name:  LM_gate_times
        null_value:     not_defined
        bounds:         LM_gate_times_bnds
        units:          seconds
        grid_mapping:   spatial_ref
        valid_range:    [-1.135000e-06  1.394365e-03]
        long_name:      low moment gate times
    -1.135e-06




.. GENERATED FROM PYTHON SOURCE LINES 107-108

Plotting

.. GENERATED FROM PYTHON SOURCE LINES 108-113

.. code-block:: default


    # Make a figure of one of the raster data variables, using Xarray's plotter
    plt.figure()
    new_survey.raster['magnetic_tmi'].plot(cmap='jet')
    plt.tight_layout()
    plt.show()


.. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_001.png
   :alt: spatial_ref = 0.0
   :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.555 seconds)


.. _sphx_glr_download_examples_Creating_GS_Files_plot_csv_skytem_to_netcdf.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_csv_skytem_to_netcdf.py <plot_csv_skytem_to_netcdf.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_csv_skytem_to_netcdf.ipynb <plot_csv_skytem_to_netcdf.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
