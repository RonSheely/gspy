
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples/Creating_GS_Files/plot_csv_skytem_to_netcdf.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_examples_Creating_GS_Files_plot_csv_skytem_to_netcdf.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_Creating_GS_Files_plot_csv_skytem_to_netcdf.py:


Multi-dataset Survey
--------------------

This example demonstrates the typical workflow for creating a GS file for an AEM survey in its entirety, i.e., the NetCDF file contains all related datasets together, e.g., raw data, processed data, inverted models, and derivative products. Specifically, this survey contains:

1. Minimally processed (raw) AEM data and raw/processed magnetic data provided by SkyTEM
2. Fully processed AEM data used as input to inversion
3. Laterally constrained inverted resistivity models
4. Point-data estimates of bedrock depth derived from the AEM models
5. Interpolated magnetic and bedrock depth grids

Note:
To make the size of this example more managable, some of the input datasets have been downsampled relative to the source files in the data release referenced below.

Dataset Reference:
Minsley, B.J, Bloss, B.R., Hart, D.J., Fitzpatrick, W., Muldoon, M.A., Stewart, E.K., Hunt, R.J., James, S.R., Foks, N.L., and Komiskey, M.J., 2022, Airborne electromagnetic and magnetic survey data, northeast Wisconsin (ver. 1.1, June 2022): U.S. Geological Survey data release, https://doi.org/10.5066/P93SY9LI.

.. GENERATED FROM PYTHON SOURCE LINES 20-26

.. code-block:: Python

    import matplotlib.pyplot as plt
    from os.path import join
    import numpy as np
    from gspy import Survey









.. GENERATED FROM PYTHON SOURCE LINES 27-29

Convert the Skytem csv data to NetCDF
+++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 31-32

Initialize the Survey

.. GENERATED FROM PYTHON SOURCE LINES 32-42

.. code-block:: Python


    # Path to example files
    data_path = '..//..//..//..//example_material//example_1'

    # Survey metadata file
    metadata = join(data_path, "data//WI_SkyTEM_survey_md.yml")

    # Establish the Survey
    survey = Survey(metadata)








.. GENERATED FROM PYTHON SOURCE LINES 43-46

1 - Raw Data -
Import raw AEM data from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 46-52

.. code-block:: Python

    d_data1 = join(data_path, 'data//WI_SkyTEM_2021_ContractorData.csv')
    d_supp1 = join(data_path, 'data//WI_SkyTEM_raw_data_md.yml')

    # Add the raw AEM data as a tabular dataset
    survey.add_data(key='raw_data', data_filename=d_data1, metadata_file=d_supp1, system=survey.system)








.. GENERATED FROM PYTHON SOURCE LINES 53-56

2 - Processed Data -
Import processed AEM data from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 56-64

.. code-block:: Python

    d_data2 = join(data_path, 'data//WI_SkyTEM_2021_ProcessedData.csv')
    d_supp2 = join(data_path, 'data//WI_SkyTEM_processed_data_md.yml')

    system = {"skytem_system" : survey.system["nominal_system"].isel(lm_gate_times=np.s_[1:], hm_gate_times=np.s_[10:]),
              "magnetic_system" : survey.system["magnetic_system"]}

    # Add the processed AEM data as a tabular dataset
    survey.add_data(key='processed_data', data_filename=d_data2, metadata_file=d_supp2, system=system)







.. GENERATED FROM PYTHON SOURCE LINES 65-68

3 - Inverted Models -
Import inverted AEM models from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 68-74

.. code-block:: Python

    m_data3 = join(data_path, 'model//WI_SkyTEM_2021_InvertedModels.csv')
    m_supp3 = join(data_path, 'model//WI_SkyTEM_inverted_models_md.yml')

    # Add the inverted AEM models as a tabular dataset
    survey.add_data(key='inverted_models', data_filename=m_data3, metadata_file=m_supp3)








.. GENERATED FROM PYTHON SOURCE LINES 75-78

4 - Bedrock Picks -
Import AEM-based estimated of depth to bedrock from CSV-format.
Define input data file and associated metadata file

.. GENERATED FROM PYTHON SOURCE LINES 78-84

.. code-block:: Python

    d_data4 = join(data_path, 'data//topDolomite_Blocky_LidarDEM.csv')
    d_supp4 = join(data_path, 'data//WI_SkyTEM_bedrock_picks_md.yml')

    # Add the AEM-based estimated of depth to bedrock as a tabular dataset
    survey.add_data(key='depth_to_bedrock', data_filename=d_data4, metadata_file=d_supp4)








.. GENERATED FROM PYTHON SOURCE LINES 85-88

5 - Derivative Maps -
Import interpolated bedrock and magnetic maps from TIF-format.
Define input metadata file (which contains the TIF filenames linked to variable names)

.. GENERATED FROM PYTHON SOURCE LINES 88-93

.. code-block:: Python

    m_supp5 = join(data_path, 'data//WI_SkyTEM_mag_bedrock_grids_md.yml')

    # Add the interpolated maps as a raster dataset
    survey.add_data(key='derived_maps', metadata_file=m_supp5)








.. GENERATED FROM PYTHON SOURCE LINES 94-95

Save to NetCDF file

.. GENERATED FROM PYTHON SOURCE LINES 95-98

.. code-block:: Python

    d_out = join(data_path, 'model//WISkyTEM.nc')
    survey.write_netcdf(d_out)








.. GENERATED FROM PYTHON SOURCE LINES 99-100

Reading back in

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: Python

    new_survey = Survey.open_netcdf(d_out)








.. GENERATED FROM PYTHON SOURCE LINES 103-104

Plotting

.. GENERATED FROM PYTHON SOURCE LINES 104-118

.. code-block:: Python

    plt.figure()
    new_survey['raw_data']['height'].plot()
    plt.tight_layout()

    plt.figure()
    new_survey['processed_data']['elevation'].plot()
    plt.tight_layout()

    # Make a figure of one of the raster data variables, using Xarray's plotter
    plt.figure()
    d = new_survey['derived_maps']['magnetic_tmi']
    d.plot(cmap='jet')
    plt.tight_layout()
    plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_001.png
         :alt: spatial_ref = 0.0
         :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_002.png
         :alt: spatial_ref = 0.0
         :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_003.png
         :alt: spatial_ref = 0.0
         :srcset: /examples/Creating_GS_Files/images/sphx_glr_plot_csv_skytem_to_netcdf_003.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 5.187 seconds)


.. _sphx_glr_download_examples_Creating_GS_Files_plot_csv_skytem_to_netcdf.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_csv_skytem_to_netcdf.ipynb <plot_csv_skytem_to_netcdf.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_csv_skytem_to_netcdf.py <plot_csv_skytem_to_netcdf.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_csv_skytem_to_netcdf.zip <plot_csv_skytem_to_netcdf.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
